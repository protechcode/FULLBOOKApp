package com.epitech.anapp;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Context;
import android.graphics.Rect;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.squareup.picasso.Picasso;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class MainActivity extends AppCompatActivity {


    private static final String TAG = "An App says:";

    private OkHttpClient httpClient;

    private void fetchData() {
        httpClient = new OkHttpClient.Builder().build();
    }

    private static class Photo {
        String id;
        String title;
    }

    private static class PhotoVH extends RecyclerView.ViewHolder {
        ImageView photo;
        TextView title;

        public PhotoVH(View itemView) {
            super(itemView);
        }
    }
    final List<Photo> photos = new ArrayList<Photo>();
    private class CustomAdapter extends RecyclerView.Adapter<PhotoVH>{
        @NonNull
        @Override
        public PhotoVH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
            return null;
        }

        @Override
        public void onBindViewHolder(@NonNull PhotoVH holder, int position) {

        }

        @Override
        public int getItemCount() {
            return 0;
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        fetchData();
        Request request = new Request.Builder()
                .url("https://api.imgur.com/3/gallery/user/rising/0.json")
                .method("GET", null)
                .addHeader("Authorization", "Client-ID 0d2e6bc907e175a")
                .build();

        /**
         *Request request = new Request.Builder()
         *                 .url("https://api.imgur.com/3/gallery/user/rising/0.json")
         *                 .method("GET", null)
         *                 .addHeader("Authorization", "Client-ID 0d2e6bc907e175a")
         *                 .build();
         */
        /


        httpClient.newCall(request).enqueue(new Callback() {


            @Override
            public void onFailure(Call call, IOException e) {
                Log.e(TAG, "An error has occurred " + e);
            }

            @Override
            public void onResponse(Call call, Response response) throws IOException {

                JSONObject data = null;
                try {
                    data = new JSONObject(response.body().string());
                    JSONArray items = data.getJSONArray("data");



                    for (int i = 0; i < items.length(); i++) {
                        JSONObject item = items.getJSONObject(i);
                        Photo photo = new Photo();
                        if (item.getBoolean("is_album")) {
                            photo.id = item.getString("cover");
                        } else {
                            photo.id = item.getString("id");
                        }
                        photo.title = item.getString("title");

                        photos.add(photo); // Add photo to list
                    }
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            render(photos);
                        }


                        private void render(final List<Photo> photos) {
                            RecyclerView rv = (RecyclerView) findViewById(R.id.rv_of_photos);
                            Context rvC = rv.getContext();
                            rv.setLayoutManager(new LinearLayoutManager(rvC));
                            rv.setAdapter(adapter);

                            rv.addItemDecoration(new RecyclerView.ItemDecoration() {
                                @Override
                                public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
                                    outRect.bottom = 16; // Gap of 16px
                                }
                            });
                        }
                        RecyclerView.Adapter<PhotoVH> adapter = new RecyclerView.Adapter<PhotoVH>() {
                            @Override
                            public PhotoVH onCreateViewHolder(ViewGroup parent, int viewType) {
                                PhotoVH vh = new PhotoVH(getLayoutInflater().inflate(R.layout.item, null));
                                vh.photo = (ImageView) vh.itemView.findViewById(R.id.photo);
                                vh.title = (TextView) vh.itemView.findViewById(R.id.title);
                                return vh;
                            }

                            @Override
                            public void onBindViewHolder(PhotoVH holder, int position) {
                                Picasso.get().load("https://i.imgur.com/" +
                                        photos.get(position).id + ".jpg").into(holder.photo);
                                holder.title.setText(photos.get(position).title);
                            }

                            @Override
                            public int getItemCount() {
                                return photos.size();
                            }
                        };



                    });



                } catch (JSONException e) {
                    e.printStackTrace();
                }

                //
            }


        });


    }
}

/*
*  OkHttpClient client = new OkHttpClient().newBuilder()
                .build();
*
* */
/**

*/

-----------------Put this again to show pop up-----------------------------------------------------------------------
// inflate the layout of the popup window
                                            LayoutInflater inflater = (LayoutInflater)
                                                    getSystemService(LAYOUT_INFLATER_SERVICE);
                                            View popupView = inflater.inflate(R.layout.pop_up_product, null);
                                            // create the popup window
                                            int width = LinearLayout.LayoutParams.MATCH_PARENT;
                                            int height = LinearLayout.LayoutParams.WRAP_CONTENT;
                                            boolean focusable = true; // lets taps outside the popup also dismiss it
                                            PopupWindow popupWindow = new PopupWindow(popupView, width, height, focusable);
                                            ((TextView)popupWindow.getContentView().findViewById(R.id.pop_up_title)).setText(title);
                                            ((TextView)popupWindow.getContentView().findViewById(R.id.pop_up_description)).setText(description);
                                            ((TextView)popupWindow.getContentView().findViewById(R.id.pop_up_category)).setText(category);
                                            ((TextView)popupWindow.getContentView().findViewById(R.id.pop_up_price)).setText(price);
                                            Picasso.get().load(image_url_1).into((ImageView) popupWindow.getContentView().findViewById(R.id.pop_up_image));

                                            // show the popup window
                                            // which view you pass in doesn't matter, it is only used for the window
                                            popupWindow.showAtLocation(view, Gravity.CENTER, 0, 0);

                                            // dismiss the popup window when touched
                                            popupView.setOnTouchListener(new View.OnTouchListener() {
                                                                             @Override
                                                                             public boolean onTouch(View v, MotionEvent event) {
                                                                                 popupWindow.dismiss();
                                                                                 return true;
                                                                             }
                                                                         });
