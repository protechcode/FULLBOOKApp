{"ast":null,"code":"var _jsxFileName = \"/home/salma/Rendu/Final-Project/backend/client/src/components/auth/loginModal.js\";\nimport { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginModal extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      modal: false,\n      email: '',\n      password: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      // Clear errors\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const {\n        email,\n        password\n      } = this.state;\n      const user = {\n        email,\n        password\n      }; // Attempt to login\n\n      this.props.login(user);\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      // Check for register error\n      if (error.id === 'LOGIN_FAIL') {\n        this.setState({\n          msg: error.msg.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // If authenticated, close modal\n\n\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        className: \"btn btn-sm\",\n        children: /*#__PURE__*/_jsxDEV(NavLink, {\n          onClick: this.toggle,\n          href: \"#\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-dark\",\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 132\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 104\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 64\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggle,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggle,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [this.state.msg ? /*#__PURE__*/_jsxDEV(Alert, {\n            color: \"danger\",\n            children: this.state.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 44\n          }, this) : null, /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: this.onSubmit,\n            children: /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                for: \"email\",\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"email\",\n                name: \"email\",\n                id: \"email\",\n                placeholder: \"Email\",\n                className: \"mb-3\",\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                for: \"password\",\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"password\",\n                name: \"password\",\n                id: \"password\",\n                placeholder: \"Password\",\n                className: \"mb-3\",\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                color: \"bleu\",\n                style: {\n                  marginTop: '2rem'\n                },\n                block: true,\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nLoginModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  clearErrors\n})(LoginModal);","map":{"version":3,"sources":["/home/salma/Rendu/Final-Project/backend/client/src/components/auth/loginModal.js"],"names":["Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","login","clearErrors","LoginModal","state","modal","email","password","msg","toggle","props","setState","onChange","e","target","name","value","onSubmit","preventDefault","user","componentDidUpdate","prevProps","error","isAuthenticated","id","render","marginTop","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass LoginModal extends Component {\n    state = {\n        modal: false,\n        email: '',\n        password: '',\n        msg: null\n    };\n\n    static propTypes = {\n        isAuthenticated: PropTypes.bool,\n        error: PropTypes.object.isRequired,\n        login: PropTypes.func.isRequired,\n        clearErrors: PropTypes.func.isRequired\n    }\n\n    componentDidUpdate(prevProps) {\n        const { error, isAuthenticated } = this.props;\n        if(error !== prevProps.error){\n            // Check for register error\n            if(error.id === 'LOGIN_FAIL'){\n                this.setState({msg: error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n\n        // If authenticated, close modal\n        if(this.state.modal){\n            if(isAuthenticated){\n                this.toggle();\n            }\n        }\n    }\n\n    toggle = () => {\n        // Clear errors\n        this.props.clearErrors();\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    onChange = (e) => {\n        this.setState({[e.target.name]:e.target.value});\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault(); \n        \n        const {email, password} = this.state;\n        const user = {email, password};\n\n        // Attempt to login\n        this.props.login(user);\n    }\n\n    render(){\n        return(\n            <div className=\"container\">\n                <Button color=\"success\" className=\"btn btn-sm\"><NavLink onClick={this.toggle} href=\"#\"><span className=\"text-dark\"><b>Login</b></span></NavLink></Button>\n                <Modal\n                    isOpen={this.state.modal}\n                    toggle={this.toggle}\n                >\n                    <ModalHeader toggle={this.toggle}>\n                        Login\n                    </ModalHeader>\n                    <ModalBody>\n                        {this.state.msg ? (<Alert color=\"danger\">{this.state.msg}</Alert>):null}\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"email\">Email</Label>\n                                <Input\n                                    type=\"email\"\n                                    name=\"email\"\n                                    id=\"email\"\n                                    placeholder=\"Email\"\n                                    className=\"mb-3\"\n                                    onChange={this.onChange}\n                                />\n                                <Label for=\"password\">Password</Label>\n                                <Input\n                                    type=\"password\"\n                                    name=\"password\"\n                                    id=\"password\"\n                                    placeholder=\"Password\"\n                                    className=\"mb-3\"\n                                    onChange={this.onChange}\n                                />\n                                <Button\n                                    color=\"bleu\"\n                                    style={{marginTop: '2rem'}}\n                                    block\n                                >Login</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n});\n\nexport default connect(mapStateToProps,{login, clearErrors})(LoginModal);"]},"metadata":{},"sourceType":"module"}