{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types';\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('http://localhost:4000/api/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return dispatch => {\n    // headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //request body\n\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n    axios.post('http://localhost:4000/api/register', body, config).then(res => dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    })).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n  };\n};\nexport const login = _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  return dispatch => {\n    // headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //request body\n\n    const body = JSON.stringify({\n      email,\n      password\n    });\n    axios.post('http://localhost:4000/api/login', body, config).then(res => dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    })).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n      dispatch({\n        type: LOGIN_FAIL\n      });\n    });\n  };\n}; // logout user\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  //Get token from local storage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/salma/Rendu/Final-Project/backend/Client-style/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL} from './types';\n\nexport const loadUser = () => (dispatch, getState) => {\n    // User loading\n    dispatch({ type: USER_LOADING });\n\n    axios.get('http://localhost:4000/api/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n}\n\nexport const register = ({name, email, password}) => dispatch => {\n    // headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    //request body\n    const body = JSON.stringify({name, email, password});\n\n    axios.post('http://localhost:4000/api/register',body,config)\n        .then(res => dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        });\n}\n\nexport const login = ({email, password}) => dispatch => {\n    // headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n    //request body\n    const body = JSON.stringify({email, password});\n\n    axios.post('http://localhost:4000/api/login',body,config)\n        .then(res => dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n            dispatch({\n                type: LOGIN_FAIL\n            });\n        });\n}\n// logout user\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    }\n}\n\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n    //Get token from local storage\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers:{\n            \"Content-type\": \"application/json\",\n        }\n    }\n\n    if(token){\n        config.headers['x-auth-token'] = token;\n    }\n\n    return config;\n}"]},"metadata":{},"sourceType":"module"}